/*
* This is a manifest file that'll be compiled into application.css, which will include all the files
* listed below.
*
* Any CSS and SCSS file within this directory, lib/assets/stylesheets, vendor/assets/stylesheets,
* or vendor/assets/stylesheets of plugins, if any, can be referenced here using a relative path.
*
* You're free to add application-wide styles to this file and they'll appear at the top of the
* compiled file, but it's generally better to create a new file per style scope.
*
*= require_tree .
*= require_self
*/

/*<%#======================================================================================================
===========================================================================================================

	META & PREREQ

===========================================================================================================
=======================================================================================================%>*/

$phi: 1.61803398875; /* use this for golden ratio */

$breakpoint-00: 630px; /* one-handed devices */
$breakpoint-01: 932px; /* two-handed devices */
$breakpoint-02: 1300px; /* HD devices */
$breakpoint-03: 2100px; /* XHD devices */

$phone-max: $breakpoint-01;
$mobile-max: $breakpoint-02;

$font-size-0: 12px;
$font-size-1: 15px;
$font-size-2: 21px;
$font-size-3: 28px;

$standard-margin: 0.5rem;
$half-margin: 0.5rem;
$full-margin: $standard-margin * 2;

$content-width: 100%; /* 100% here will define a fully fluid site! */

/*<%#======================================================================================================
	FUNCTIONS
=======================================================================================================%>*/

@function emDarken($color, $amount){

	$hue: hue(mix($color, #80F, $weight: 85%));
	$sat: max(min( saturation($color)*(1-$amount), 100% ), 0%);
	$lit: max(min( lightness($color) * (1 - ($amount * (200 - saturation($color))/200%)), 100% ), 0%);

	$value: hsl($hue, $sat, $lit);
	@return $value;
}

@function emLighten($color, $amount){

	$hue: hue(mix($color, #FE8, $weight: 90%));
	$sat: saturation($color);
	$lit: max(min( lightness($color) * (1 + $amount), 100% ), 0%);

	$value: hsl($hue, $sat, $lit);
	@return $value;
}

/*<%#======================================================================================================
	BASE VALUES
=======================================================================================================%>*/

$standard-radius: 0.33rem;
$standard-skew: 10; /* degrees */

$min-height: 4rem;

<% colors = [
	{	names:	['red'],
		value:	"#E34"
	},
	{	names:	['orange'],
		value:	"#F70"
	},
	{	names:	['yellow'],
		value:	"#FE0"
	},
	{	names:	['green'],
		value:	"#30D870"
	},
	{	names:	['blue', 'link-color'],
		value:	"#1AD"
	},
	{	names:	['cyan'],
		value:	"#1BE"
	},
	{	names:	['teal'],
		value:	"#3BB"
	},
	{	names:	['violet'],
		value:	"#C5C"
	},
	{	names:	['grey'],
		value:	"#708490"
	},
	{	names:	['white'],
		value:	"#FFF"
	},
	{	names:	['dark', 'dark-color'],
		value:	"hsl(200, 30%, 30%)"
	},
	{	names:	['light', 'light-color'],
		value:	"hsl(200, 20%, 98%)"
	},
	{	names:	['conred', 'conjectur-red', 'primary'],
		value:	"hsl(8, 100%, 40%)"
	},
	{	names:	['conbred', 'conjectur-bright-red', 'accent'],
		value:	"hsl(10, 100%, 50%)"
	},
	{	names:	['conblack', 'conjectur-black'],
		value:	"hsl(188, 30%, 15%)"
	},
	{	names:	['conblue', 'conjectur-blue'],
		value:	"hsl(200, 66%, 30%)"
	},
	{	names:	['congrey', 'conjectur-grey','congray', 'conjectur-gray'],
		value:	"hsl(188, 15%, 85%)"},
	];%>

<% colors.each do |color| %>
	<% color[:names].each do |color_name| %>
		$<%= color_name %>: <%= color[:value] %>;
		$lighter-<%= color_name %>: emLighten(<%= color[:value] %>, 0.6);
		$darker-<%= color_name %>: emDarken(<%= color[:value] %>, 0.2);
		.<%= color_name %>-color { background-color: $<%= color_name %> }
		.lighter-<%= color_name %>-color { background-color: $lighter-<%= color_name %> }
		.darker-<%= color_name %>-color { background-color: $darker-<%= color_name %> }
	<% end %>
<% end %>

$dark-color: $dark;
$light-color: $light;
$alt-light-color: mix($light-color, $conjectur-grey, $weight: (100% / $phi));

$primary-color: $primary;
$accent-color: $accent;
$bg-color: $light;
$shadow-color: mix($dark, $primary-color, $weight: 80%);

$text-color: emDarken($dark-color, 0.25);
$text-light-color: $light-color;

/*<%#======================================================================================================
	STANDARD MIXINS
=======================================================================================================%>*/

@mixin priority-00 {
	font-size: $font-size-0;
}
@mixin priority-01 {
	font-size: $font-size-1;
}
@mixin priority-02 {
	font-size: $font-size-2;
	@include display-font;
	font-weight: normal; /* helps manage size changes */
}
@mixin priority-03 {
	font-size: $font-size-3;
	@include display-font;
}

@mixin clearfix {
	&:after{
	     visibility: hidden;
	     display: block;
	     font-size: 0;
	     content: " ";
	     clear: both;
	     height: 0;
	 }
 }

@mixin right {
	float: right !important;
} .right, .pull-right { @include right }

@mixin left {
	float: left !important;
} .left, .pull-left { @include left }

@mixin align-right {
	text-align: right !important;
} .align-right, .tx-right { @include align-right }

@mixin align-left {
	text-align: left !important;
} .align-left, .tx-left { @include align-left }

@mixin primary-font {
	font-family: 'Montserrat', 'Myriad Pro', sans-serif;
	text-decoration: none !important;
	text-rendering: optimizeLegibility;
	-webkit-font-smoothing: antialiased;
	-moz-osx-font-smoothing: grayscale;
	-ms-font-feature-settings:"liga", "dlig";
	-o-font-feature-settings:"liga", "dlig";
	-webkit-font-feature-settings:"liga", "dlig";
	font-feature-settings:"liga", "dlig";
} .primary-font { @include primary-font; }

@mixin display-font {
	font-family: 'Ubuntu', 'Myriad Pro', sans-serif;
	font-weight: lighter;
}

@mixin headline {
	@include primary-font;
	@include display-font;
	font-size: $font-size-3;
	color: $primary-color;
	[class *= -color]:not(.light-color) & {
		color: $text-light-color;
		text-shadow: 1px 0 transparentize($text-light-color,0.5);
	}
	&, & > * {line-height: 1.125;}
	& > a {
		font-weight: bold;
		color: $accent-color;
	}
} .headline { @include headline; }

@mixin linear-gradient($stop-colors: (black, white), $angle: 90, $before: null){

	/* firefox */
	$stops: null;
	@for $i from 1 through length($stop-colors) {
		$stops: append(
			$stops,
			#{nth($stop-colors, $i)} #{100% * ($i - 1) / (length($stop-colors) - 1)},
			comma
		);
	}

	background: $before, -moz-linear-gradient(#{$angle + deg}, $stops);

	/* safari and chrome */
	$stops: null;
	@for $i from 1 through length($stop-colors) {
		$newStop:
			#{nth($stop-colors, $i)}
			#{100% * ($i - 1) / (length($stop-colors) - 1)} ;
		$stops: append(
			$stops,
			$newStop,
			comma);
	}

	background: $before, -webkit-linear-gradient(#{$angle + deg}, #{$stops});

	/* opera */
	$stops: null;
	@for $i from 1 through length($stop-colors) {
		$newStop:
			#{100% * ($i - 1) / (length($stop-colors) - 1)}
			#{nth($stop-colors, $i)};
		$stops: append(
			$stops,
			$newStop,
			comma);
	}

	/* ie */
	$stops: null;
	@for $i from 1 through length($stop-colors) {
		$newStop:
			#{100% * ($i - 1) / (length($stop-colors) - 1)}
			#{nth($stop-colors, $i)};
		$stops: append(
			$stops,
			$newStop,
			comma);
	}

	background: $before, -ms-linear-gradient(#{$angle + deg}, #{$stops});

	/* """"standard"""" (exaggerated airquotes) */

	$stops: null;
	@for $i from 1 through length($stop-colors) {
		$newStop:
			#{100% * ($i - 1) / (length($stop-colors) - 1)}
			#{nth($stop-colors, $i)};
		$stops: append(
			$stops,
			$newStop,
			comma
		);
	}

	background: $before, -ms-linear-gradient(#{($angle + 180)%360 + deg}, #{$stops});
}

@mixin transition($inputs){
	$transitions: null;
	@for $i from 1 through length($inputs) {
		$input: nth($inputs, $i);
		$transitions: append(
			$transitions,
			$input,
			space
		);
	}

	transition: $inputs;
	-o-transition: $inputs;
	-ms-transition: $inputs;
	-moz-transition: $inputs;
	-webkit-transition: $inputs;
}

@mixin elementWithColor($color, $style:'none', $important:false){

	$force: null;

	@if $important {$force: !important}

	background: $color $force;
	color: $text-color $force;

	$hue: hue($color)/1deg;
	$sat: saturation($color)/100%;
	$lit: lightness($color)/1%;
	$lit-thresh: 0;
	$sat-modifier: 60;

	@if
	($hue > 40 and $hue < 100) /* YELLOW */
	or ($hue > 160 and $hue < 190) /* CYAN */
	{ $sat-modifier: 30; }

	@if
	($hue > 340 or $hue < 5) /* RED */
	or ($hue > 215 and $hue < 280) /* BLUE */
	{ $sat-modifier: 80 }


	$lit-tresh: 0;

	$lit-thresh: (($sat-modifier * $sat) + (77 * (1 - $sat) ));

	@if $lit < $lit-thresh {
		color: $text-light-color $force;
	} @else {
		color: $text-color $force;
	}

	@if $style == 'button' {
		box-shadow: inset 0 -0.25em emDarken($color, 0.2),
					inset 0 -0.5em 0.32em -0.25em emLighten($color, 0.15) $force;
		padding: 0.3em 1em 0.4em $force;
		border-radius: $standard-radius $force;
		vertical-align: middle;
		&:active {
			padding: 0.35em 1em 0.35em $force;
			box-shadow: inset 0 -0.18em emDarken($color, 0.2) $force;
		}
	} @else if $style == 'tab-label' {
		padding: 0.25em 1em $force;
		border-top-left-radius: $standard-radius $force;
		border-top-right-radius: $standard-radius $force;
	}
}

@mixin sticky($anchor:top, $value:0) {
	#{$anchor}: $value !important;
    position: fixed !important;
    width: 100%;
    position: -webkit-sticky !important;
    position: -moz-sticky !important;
    position: -ms-sticky !important;
    position: -o-sticky !important;
    position: sticky !important;
    z-index: 999; /* designated for sticky : 1 below modal!; */
    } .sticky { @include sticky; }

@mixin transform($transforms) {
	-moz-transform: $transforms;
	 -o-transform: $transforms;
	-ms-transform: $transforms;
	-webkit-transform: $transforms;
	transform: $transforms;
}
@mixin rotate ($deg) {
	@include transform(rotate(#{$deg}deg));
}

@mixin scale($scale) {
	@include transform(scale($scale));
}
@mixin translate ($x, $y) {
	@include transform(translate($x, $y));
}
@mixin skew ($x, $y) {
	@include transform(skew(#{$x}deg, #{$y}deg));
}

@mixin transform-origin ($origin) {
	moz-transform-origin: $origin;
	-o-transform-origin: $origin;
	-ms-transform-origin: $origin;
	-webkit-transform-origin: $origin;
	transform-origin: $origin;
}

@mixin clearfix {
	&:before, &:after {
		content: "";
		display: block;
		height: 1px;
	}
}

@mixin filter($value){ /* incompatible with direct tranformations! */
	filter: $value;
	-webkit-filter: $value;

	transform: translateZ(0px);
	-o-transform: translateZ(0px);
	-ms-transform: translateZ(0px);
	-moz-transform: translateZ(0px);
	-webkit-transform: translateZ(0px);
}

@mixin transition($value){
	transition: $value;
	-o-transition: $value;
	-ms-transition: $value;
	-moz-transition: $value;
	-webkit-transition: $value;
}

@mixin transform($value){
	transform: $value;
	-o-transform: $value;
	-ms-transform: $value;
	-moz-transform: $value;
	-webkit-transform: $value;
}

html {
	font-size: 14px;
}

* {
	color: #345;
}

h1,h2,h3,h4,h5,h6,
p,li {
	padding: $full-margin; /* don't use <p> inside of a table!  use grid layout for any complex information. */
	padding-top: 0;
	color: #345;
	font-weight: thinner;
}

.row, .inner {
  width: 100%;
  margin-left: auto;
  margin-right: auto;
  margin-top: 0;
  margin-bottom: 0;
  max-width: $content-width;
}

:not(.row) > .columns {
	margin: 0;
}

$cell-padding-side: $half-margin;
$cell-padding-vert: $half-margin/2;

$link_color: #8CF;

$table-row-color: #f8f8f8;
$table-odd-row-color: white;
$table-head-color: white;
$table-highlight-color: mix($table-row-color, $link_color, $weight: 50%);
$table-odd-highlight-color: mix($table-odd-row-color, $link_color, $weight: 50%);

table {
	table-layout: fixed;
	border-collapse: separate;
	padding: 0 !important;
	tr {
		background: $table-row-color;
		border-left: $full-margin solid transparent;
		border-right: $full-margin solid transparent;
		td, th {
			padding: #{$cell-padding-vert} #{$cell-padding-side};
			border: 1px solid transparent;
			button, .button {
				display: block;
				height: 2rem;
				padding: 0;
				line-height: 2rem;
				width: calc(100% + #{$cell-padding-side * 2});
				width: -webkit-calc(100% + #{$cell-padding-side * 2});
				margin: #{-$cell-padding-vert} #{-$cell-padding-side};
			}
			&:first-child {
				padding-left: $full-margin;
			}
			&:last-child {
				padding-right: $full-margin;
				button, .button {
					width: calc(100% + #{($cell-padding-side * 2) + $half-margin} - 1px);
				}
			}
		}
	}
	thead tr {
		th {
			background: $table-head-color;
		}
	}
	tbody tr {
		&:hover, &:focus {
			background: $table-highlight-color;
		}
		&:nth-child(2n) {
			background: $table-odd-row-color;
			&:hover, &:focus {
				background: $table-odd-highlight-color;
				border-left: $half-margin solid $table-odd-highlight-color;
				border-right: $half-margin solid $table-odd-highlight-color;
			}
		}
	}
}

button, .button {
	min-width: 8rem;
	background: $accent-color;
	color: white;
	@include transition(background 0.25s);
	&:hover {
		background: lighten($accent-color, 10);
	}
	&.fill-width {
		width: 100%;
	}
}

form {
	> * {
		padding: 0;
	}
}

$top-bar-height: 4rem;
.top-bar {
	height: $top-bar-height;
	background: $white;
	box-shadow: 0 #{$top-bar-height * -1.5} #{$top-bar-height} #{$top-bar-height};

	.brand-image {
		img {
			height: $top-bar-height - ($full-margin * 2);
			margin-top: $full-margin;
		}
	}
}

$side-nav-width: 16rem;
$side-nav-color: #002838;
$side-nav-link-height: 4rem;

.side-nav {
	float: left;
	position: absolute;
	overflow: hidden;
	width: $side-nav-width;
	min-height: calc(100vh - #{$top-bar-height});
	min-height: -webkit-calc(100vh - #{$top-bar-height});
	background: $side-nav-color;
	padding: 0;
	li {
		display: block;
		position: relative;
		margin: 0;
		padding: 0;
		border-bottom: 1px solid #456;
		a {
			display: block;
			padding: 0 $full-margin !important;
			height: $side-nav-link-height;
			line-height: $side-nav-link-height;
			&:hover, &:focus{
				background: hsla(0, 100%, 100%, 0.125) !important;
			}
			&.active {
				background: #456 !important;
				color: white !important;
				&:after {
					content: "";
					display: block;
					position: absolute;
					right: -$side-nav-link-height * 0.5;
					top: 0;
					height: $side-nav-link-height;
					width:  $side-nav-link-height;
					background: white;
					border-radius: 0 0 0 2px;
					@include transform(rotate(45deg));
					@include transform(matrix(0.50, 0.50, -0.50, 0.50, 0, 0)); /* diamond of same height */
					@include transform(matrix(0.55, 0.55, -0.55, 0.55, 0, 0)); /* diamond of slgihtly greater height */
				}
			}
		}
	}
	@media(max-width: 600px){
		width: 100%;
		min-height: 0;
		float: none;
		& li a.active:after{
			display: none;
		}
	}
}

.page-content {
	float:right;
	max-width: calc(100% - #{$side-nav-width});
	max-width: -webkit-calc(100% - #{$side-nav-width});

	@media(max-width: 600px){
		max-width: none;
		float: none;
	}

	.breadcrumbs {
		background: none;
		border: none;
		padding: 0 $full-margin;
		height: $min-height;
		line-height: $min-height;
		li {
			font-size: inherit;
			text-transform: none;
			padding: 0;
			line-height: $min-height;
		}
	}
}

.printout {
	font-family: monospace;
	background: #EEE;
	border: 1px solid #CCC;
	max-height: 40vh;
	overflow-y: scroll;
}

.sheet-data {
	padding: 0 !important;
	&, & * {
		vertical-align: top;
	}
	& > .sheet-data-row {
		padding: 0.25rem;
		&:nth-of-type(2n){
			background: rgba(255,255,255,0.5);
		}
	}
}

.sheet-data-key {
	display: inline-block;
	width: 12rem;
	text-align: right;
	opacity: 0.8;
	&:after{
		content: ": ";
		white-space: pre;
	}
}
.sheet-data-value {
	display: inline-block;
}
.sheet-data-subsheet {
	display: block;
	margin-left: 2rem;
	.sheet-data-key {
		opacity: 0.4;
	}
}













@mixin tab-top {
	z-index: 2;
} .tabs dd a, .tab {
	@include tab-top;
	background-color: $conjectur-gray;
}

.section-title {
	position: absolute;
	background-color: inherit;
	top: $min-height / -2;
	height: $min-height;
	line-height: $min-height;
	display: table;
	section.align-right & {
		right: 0;
	}
	[class *= -color]:not(.light-color) & {
		color: $text-light-color;
		text-shadow: 1px 0 transparentize($text-light-color,0.5);
	}
	white-space: nowrap;
	max-width: $content-width;
	padding: 0;
	@include display-font;
	font-size: $font-size-3;
	@include tab-top
}